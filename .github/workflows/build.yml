name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu]
    steps:
      - uses: actions/checkout@v4
        id: checkout
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            sudo apt-get install -y gcc-mingw-w64-x86-64
          fi
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      
      - name: Add Windows target
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: rustup target add x86_64-pc-windows-gnu
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      
      - name: Prepare artifacts
        run: |
          mkdir -p release
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            cp target/x86_64-unknown-linux-gnu/release/sigil-gen "release/sigil-gen-linux-$SHORT_SHA"
          elif [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            cp target/x86_64-pc-windows-gnu/release/sigil-gen.exe "release/sigil-gen-windows-$SHORT_SHA.exe"
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binaries
          path: release/

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Get version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep -m1 'version =' Cargo.toml | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            Built from commit ${{ github.sha }}
            Binaries tagged with short SHA: ${{ github.sha | substr(0, 7) }}
          files: |
            artifacts/x86_64-unknown-linux-gnu-binaries/*
            artifacts/x86_64-pc-windows-gnu-binaries/*
          draft: false
          prerelease: false
